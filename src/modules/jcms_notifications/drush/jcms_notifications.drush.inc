<?php

/**
 * @file
 * Drush commands for the module.
 */

use Drupal\jcms_article\Entity\ArticleVersions;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use GuzzleHttp\Exception\RequestException;

/**
 * Implements hook_drush_command().
 */
function jcms_notifications_drush_command() {
  $items = [];
  $items['article-import'] = [
    'description' => 'Imports articles from Lax via SQS (Deprecated: use drush message-import).',
    'drupal dependencies' => ['jcms_notifications'],
    'aliases' => ['ai'],
    'arguments' => [
      'lrp' => 'Long running process or not. Defaults to false.',
    ],
    'examples' => [
      'drush article-import 1' => 'Import articles from Lax as a long running process.',
      'drush article-import' => 'Import articles from Lax and return a message when finished.',
    ],
  ];
  $items['message-import-force'] = [
    'description' => 'Imports items from Lax and digests via input.',
    'drupal dependencies' => ['jcms_notifications'],
    'arguments' => [
      'id' => 'ID of article or digest.',
      'type' => 'article or digest.',
    ],
    'examples' => [
      'drush message-import-force 00288 article' => 'Retrieve the current snippet for article 00288.',
      'drush message-import-force 00288 digest' => 'Retrieve the current snippet for digest 00288.',
    ],
  ];
  $items['message-import'] = [
    'description' => 'Imports items from Lax and digests via SQS.',
    'drupal dependencies' => ['jcms_notifications'],
    'arguments' => [
      'lrp' => 'Long running process or not. Defaults to false.',
    ],
    'examples' => [
      'drush message-import 1' => 'Import items from Lax and digest as a long running process.',
      'drush message-import' => 'Import items from Lax and digest and return a message when finished.',
    ],
  ];
  $items['create-sqs-message'] = [
    'description' => 'Create an SQS message.',
    'drupal dependencies' => ['jcms_notifications'],
    'arguments' => [
      'id' => 'ID of article or digest.',
      'type' => 'article or digest.',
    ],
  ];
  $items['article-import-all'] = [
    'description' => 'Imports all articles from Lax.',
    'options' => [
      'limit' => 'Limit on the number of items to process in each import.',
      'skip-updates' => 'Do not attempt to update articles that exist already.',
    ],
    'drupal dependencies' => ['jcms_notifications'],
    'aliases' => ['aia'],
    'examples' => [
      'drush article-import-all' => 'Import all articles from Lax and return a message when finished.',
      'drush article-import-all --limit=500' => 'Import first 500 articles from Lax and return a message when finished.',
      'drush article-import-all --skip-updates' => 'Import all articles from Lax, but skip over articles that exist already, and return a message when finished.',
    ],
  ];
  $items['digest-import-all'] = [
    'description' => 'Imports all digests.',
    'options' => [
      'limit' => 'Limit on the number of items to process in each import.',
      'skip-updates' => 'Do not attempt to update articles that exist already.',
    ],
    'drupal dependencies' => ['jcms_notifications'],
    'aliases' => ['dia'],
    'examples' => [
      'drush digest-import-all' => 'Import all digests and return a message when finished.',
      'drush digest-import-all --limit=10' => 'Import first 10 digests and return a message when finished.',
      'drush digest-import-all --skip-updates' => 'Import all digests, but skip over digests that exist already, and return a message when finished.',
    ],
  ];
  $items['article-metrics-import-all'] = [
    'description' => 'Imports all metrics for articles in journal-cms.',
    'options' => [
      'limit' => 'Limit on the number of items to process in each import.',
      'skip-updates' => 'Do not attempt to update articles that have a metric value already.',
    ],
    'drupal dependencies' => ['jcms_notifications'],
    'aliases' => ['amia'],
    'examples' => [
      'drush article-metrics-import-all' => 'Import all article metrics in journal-cms and return a message when finished.',
      'drush article-metrics-import-all --limit=500' => 'Import first 500 article metrics in journal-cms and return a message when finished.',
      'drush article-metrics-import-all --skip-updates' => 'Import all article metrics in journal-cms, but skip over articles that we have a metric for already, and return a message when finished.',
    ],
  ];
  $items['send-notifications'] = [
    'description' => 'Gets notifications from the database and send them to SNS.',
    'options' => [
      'iterations' => 'Limit on the number of iterations made then terminate.',
      'sleep' => 'The amount of time in seconds to sleep before iterating over the notifications table again (defaults to 30 seconds).',
      'delay' => 'The amount of time in seconds to sleep before sending the message after receiving and loading the entities (defaults to 2 seconds).',
    ],
    'drupal dependencies' => ['jcms_notifications'],
    'aliases' => ['sendn'],
    'examples' => [
      'drush send-notifications' => 'Long running process that iterates infinitely over the notifications table.',
      'drush send-notifications --iterations=20' => 'Iterate over the notifications table 20 times then stop.',
      'drush send-notifications --sleep=10' => 'Sleep for 10 seconds after each iteration.',
      'drush send-notifications --delay=2' => 'Sleep for 2 seconds before sending.',
    ],
  ];
  return $items;
}

/**
 * Callback function drush_jcms_notifications_article_import_all().
 */
function drush_jcms_notifications_article_import_all() {
  $fetch_service = \Drupal::service('jcms_article.fetch_article');
  $fetch_versions_service = \Drupal::service('jcms_article.fetch_article_versions');
  $crud_service = \Drupal::service('jcms_article.article_crud');
  drush_print(dt('Fetching all article IDs. This may take a few minutes.'));
  $limit = drush_get_option('limit') ? (int) drush_get_option('limit') : NULL;
  if (!empty($limit)) {
    $fetch_service->setLimit($limit);
  }
  $ids = $fetch_service->getAllArticleIds();
  drush_print(dt('Received !count article IDs to process.', ['!count' => count($ids)]));
  if ($ids) {
    $time_start = microtime(TRUE);
    foreach ($ids as $num => $id) {
      $articleVersions = $fetch_versions_service->getArticleVersions($id);
      if (drush_get_option('skip-updates')) {
        $crud_service->skipUpdates();
      }
      $crud_service->crudArticle($articleVersions);
      drush_print(dt('Processed article !article_id (!num of !count)', [
        '!article_id' => $id,
        '!num' => $num + 1,
        '!count' => count($ids),
      ]));
    }
    $time_end = microtime(TRUE);
    $time = round($time_end - $time_start, 0);
    drush_print(dt('Processed !count articles in !minutes minutes !seconds seconds.', [
      '!count' => count($ids),
      '!minutes' => floor($time / 60),
      '!seconds' => round($time % 60),
    ]));
  }
}

/**
 * Callback function drush_jcms_notifications_digest_import_all().
 */
function drush_jcms_notifications_digest_import_all() {
  $fetch_service = \Drupal::service('jcms_digest.fetch_digest');
  $crud_service = \Drupal::service('jcms_digest.digest_crud');
  drush_print(dt('Fetching all digest IDs. This may take a few minutes.'));
  $limit = drush_get_option('limit') ? (int) drush_get_option('limit') : NULL;
  if (!empty($limit)) {
    $fetch_service->setLimit($limit);
  }
  $digests = $fetch_service->getAllDigests();
  drush_print(dt('Received !count digest IDs to process.', ['!count' => count($digests)]));
  if ($digests) {
    $time_start = microtime(TRUE);
    $num = 0;
    /** @var \Drupal\jcms_digest\Entity\Digest $digest */
    foreach ($digests as $digest) {
      if (drush_get_option('skip-updates')) {
        $crud_service->skipUpdates();
      }
      $crud_service->crudDigest($digest);
      drush_print(dt('Processed digest !digest_id (!num of !count)', [
        '!digest_id' => $digest->getId(),
        '!num' => ++$num,
        '!count' => count($digests),
      ]));
    }
    $time_end = microtime(TRUE);
    $time = round($time_end - $time_start, 0);
    drush_print(dt('Processed !count digests in !minutes minutes !seconds seconds.', [
      '!count' => count($digests),
      '!minutes' => floor($time / 60),
      '!seconds' => round($time % 60),
    ]));
  }
}

/**
 * Callback function drush_jcms_notifications_create_sqs_message().
 */
function drush_jcms_notifications_create_sqs_message(string $id, string $type = 'article') {
  $queue_service = \Drupal::service('jcms_notifications.queue_service');
  $message = $queue_service->prepareMessage($id, $type);
  $queue_service->sendMessage($message);
  drush_print(dt('SQS message created: !message', [
    '!message' => json_encode($message->getMessage()),
  ]));
}

/**
 * Callback function drush_jcms_notifications_article_metrics_import_all().
 */
function drush_jcms_notifications_article_metrics_import_all() {
  $metrics_service = \Drupal::service('jcms_article.fetch_article_metrics');
  drush_print(dt('Fetching article metrics. This may take a few minutes.'));
  $limit = drush_get_option('limit') ? (int) drush_get_option('limit') : NULL;

  $query = \Drupal::entityQuery('node')
    ->condition('type', 'article');
  if (!empty($limit)) {
    $query->range(0, $limit);
  }
  if (drush_get_option('skip-updates')) {
    $query->condition('field_page_views.value', 0);
  }
  $nids = $query->execute();
  /* @var Node[] $nodes */
  $nodes = Node::loadMultiple($nids);
  drush_print(dt('Received !count article metrics to process.', ['!count' => count($nids)]));
  if ($nodes) {
    $time_start = microtime(TRUE);
    $num = 0;
    foreach ($nodes as $nid => $node) {
      $articleMetrics = $metrics_service->getArticleMetrics($node->label());
      if ((int) $node->get('field_page_views')->getString() != $articleMetrics->getPageViews()) {
        $node->set('field_page_views', $articleMetrics->getPageViews());
        $node->save();
      }
      drush_print(dt('Processed article metrics for !article_id (!num of !count)', [
        '!article_id' => $node->label(),
        '!num' => ++$num,
        '!count' => count($nids),
      ]));
    }
    $time_end = microtime(TRUE);
    $time = round($time_end - $time_start, 0);
    drush_print(dt('Processed !count article metrics in !minutes minutes !seconds seconds.', [
      '!count' => count($nids),
      '!minutes' => floor($time / 60),
      '!seconds' => round($time % 60),
    ]));
  }
}

/**
 * Callback function drush_jcms_notifications_article_import().
 *
 * @deprecated
 * This has been replaced with drush_jcms_notifications_message_import().
 */
function drush_jcms_notifications_article_import($lrp = FALSE) {
  drush_jcms_notifications_message_import($lrp);
}

/**
 * Callback function drush_jcms_notifications_message_import_force().
 */
function drush_jcms_notifications_message_import_force(string $id, string $type = 'article') {
  $logger = \Drupal::logger('jcms_message_import');
  $queue_service = \Drupal::service('jcms_notifications.queue_service');
  $article_service = \Drupal::service('jcms_article.fetch_article_versions');
  $digest_service = \Drupal::service('jcms_digest.fetch_digest');
  $article_crud_service = \Drupal::service('jcms_article.article_crud');
  $digest_crud_service = \Drupal::service('jcms_digest.digest_crud');
  $message = $queue_service->prepareMessage($id, $type);
  $logger->info('Prepared message', ['message' => $message->getMessage()]);

  try {
    switch ($message->getType()) {
      case 'article':
        $articleVersions = $article_service->getArticleVersions($message->getId());
        $article_crud_service->crudArticle($articleVersions);
        $logger->info('Article snippet updated', ['message' => $message->getMessage()]);
        drush_print(dt('Article snippet updated (!id)', [
          '!id' => $message->getId(),
        ]));
        break;

      case 'digest':
        $digest = $digest_service->getDigestById($message->getId());
        $digest_crud_service->crudDigest($digest);
        $logger->info('Digest snippet updated', ['message' => $message->getMessage()]);
        drush_print(dt('Digest snippet updated (!id)', [
          '!id' => $message->getId(),
        ]));
        break;
    }
    $logger->info('Processed message', ['message_id' => $message->getMessageId()]);
  }
  catch (Exception $e) {
    $e_message = "Message: {$e->getMessage()}\n";
    $e_line = "Line: {$e->getLine()}\n";
    $e_trace = "Trace: {$e->getTraceAsString()}\n";
    $error = $e_message . $e_line . $e_trace;
    error_log($error);
    if (!$e instanceof RequestException) {
      throw $e;
    }
  }
}

/**
 * Callback function drush_jcms_notifications_message_import().
 */
function drush_jcms_notifications_message_import($lrp = FALSE) {
  $logger = \Drupal::logger('jcms_message_import');
  $queue_service = \Drupal::service('jcms_notifications.queue_service');
  $article_service = \Drupal::service('jcms_article.fetch_article_versions');
  $metrics_service = \Drupal::service('jcms_article.fetch_article_metrics');
  $digest_service = \Drupal::service('jcms_digest.fetch_digest');
  $article_crud_service = \Drupal::service('jcms_article.article_crud');
  $digest_crud_service = \Drupal::service('jcms_digest.digest_crud');
  $limit_service = \Drupal::service('jcms_notifications.limit_service');
  $logger->info('Started');
  $count = 0;
  while (!$limit_service()) {
    $message = $queue_service->getMessage();
    // If this isn't a long running process and the message is null.
    if ($message === NULL && !$lrp) {
      break;
    }
    if ($message !== NULL) {
      $logger->info('Received message', ['message' => $message->getMessage()]);
      $id = $message->getId();

      // Temporary tolerance in id while articles and metrics id are
      // inconsistent.
      if (strlen($id) < 5 && in_array($message->getType(), ['article', 'metrics'])) {
        $id = str_pad($id, 5, '0', STR_PAD_LEFT);
        $logger->warning('Id for type is too short. Changing before to after.', [
          'type' => $message->getType(),
          'before' => $message->getId(),
          'after' => $id,
        ]);
      }

      try {
        switch ($message->getType()) {
          // Process article sqs items.
          case 'article':
            $articleVersions = $article_service->getArticleVersions($id);
            $article_crud_service->crudArticle($articleVersions);
            $logger->info('Article snippet updated', ['message' => $message->getMessage()]);
            break;

          case 'digest':
            $digest = $digest_service->getDigestById($id);
            $digest_crud_service->crudDigest($digest);
            $logger->info('Digest snippet updated', ['message' => $message->getMessage()]);
            break;

          case 'metrics':
            // Process article views-downloads metrics sqs items.
            $body = $message->getMessage();
            if ($body['contentType'] == 'article' && $body['metric'] == 'views-downloads') {
              $articleVersions = $article_service->getArticleVersions($id);
              if ($articleVersions->getAction() == ArticleVersions::WRITE) {
                // Make sure article has been created.
                $node = $article_crud_service->crudArticle($articleVersions);
                $metrics = $metrics_service->getArticleMetrics($id);
                if ((int) $node->get('field_page_views')->getString() != $metrics->getPageViews()) {
                  $logger->info('Adjusted metrics', ['id' => $id, 'metrics' => $metrics->getPageViews()]);
                  $node->set('field_page_views', $metrics->getPageViews());
                  $node->save();
                }
              }
            }
            break;
        }
        $logger->info('Processed message', ['message_id' => $message->getMessageId()]);
      }
      catch (Exception $e) {
        $e_message = "Message: {$e->getMessage()}\n";
        $e_line = "Line: {$e->getLine()}\n";
        $e_trace = "Trace: {$e->getTraceAsString()}\n";
        $error = $e_message . $e_line . $e_trace;
        error_log($error);
        if (!$e instanceof RequestException) {
          throw $e;
        }
      }
      finally {
        $queue_service->deleteMessage($message);
        $logger->info('Deleted message from the queue', ['message_id' => $message->getMessageId()]);
        $count++;
      }
    }
  }
  $logger->info('Imported  queue item(s).', ['count' => $count]);
}

/**
 * Callback function drush_jcms_notifications_send_notifications().
 */
function drush_jcms_notifications_send_notifications() {
  $logger = \Drupal::logger('jcms_send_notifications');
  $storage = \Drupal::service('jcms_notifications.notification_storage');
  $sns_crud = \Drupal::service('jcms_notifications.entity_crud_notification_service');
  $limit_service = \Drupal::service('jcms_notifications.limit_service');
  $iterations = drush_get_option('iterations') ?: NULL;
  $sleep = drush_get_option('sleep') ?: 30;
  $delay = drush_get_option('delay') ?: 2;
  $i = 0;
  $logger->info('Started');
  while (!$limit_service()) {
    if ($iterations) {
      if ($i >= $iterations) {
        $logger->info('Finished.', ['!iterations' => $iterations]);
        break;
      }
      $i++;
    }
    // Read the table, get the IDs.
    $node_notifications = $storage->getNotificationEntityIds('node');
    $nodes = Node::loadMultiple($node_notifications);
    $term_notifications = $storage->getNotificationEntityIds('taxonomy_term');
    $terms = Term::loadMultiple($term_notifications);
    $entities = array_merge(array_values($nodes), array_values($terms));
    sleep($delay);
    // Iterate through them.
    $entity_ids = [];
    foreach ($entities as $entity) {
      $entity_ids[] = $entity->id();
      $busMessage = $sns_crud->sendMessage($entity);
      $logger->info('Sent notification', [
        'message' => json_decode($busMessage->getMessageJson(), TRUE),
        'etid' => $entity->getEntityTypeId(),
        'eid' => $entity->id(),
      ]);
    }
    $storage->deleteNotificationEntityIds($entity_ids);
    sleep($sleep);
  }
  $logger->info('Exiting because of limits reached.');
}
