<?php

/**
 * @file
 * Contains install and update functions for Journal CMS (Migrate).
 */

use Drupal\Core\Database\Database;
use Drupal\duration_field\Service\DurationService;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\migrate\MigrateExecutable;
use Drupal\migrate\MigrateMessage;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;

/**
 * Populate values for the person type label field.
 */
function jcms_migrate_update_8101() {
  $type_labels = [
    'e58da97e' => 'Chair',
    'c1d9072b' => 'Production assistant',
    '1efed8c1' => 'Executive editor',
    '6ec73991' => 'Systems developer',
    '2cc578c4' => 'Project Coordinator',
    'dc468415' => 'Senior front-end developer',
    '8fda748a' => 'Press officer',
    '3a87ec66' => 'Associate Features Editor',
    '5498f252' => 'Software Engineer in Test',
    '9ed0cf42' => 'Head of product',
    '1263faea' => 'Production assistant',
    '85899c80' => 'Senior editorial assistant',
    '256061b0' => 'Associate features editor',
    '9789ff46' => 'Senior production assistant',
    '535c35ff' => 'Head of external relations',
    '02525303' => 'Marketing manager',
    'b6a7f100' => 'Office and human resources manager',
    'a66a73ff' => 'Senior editorial assistant',
    'a1416110' => 'Executive director',
    '91b38f36' => 'Head of production operations',
    '1217b24f' => 'Innovation officer',
    '8939bb47' => 'Senior Drupal developer',
    'd708a92c' => 'User experience designer',
    '10c7ff5b' => 'Consultant director of finance and administration',
    '1a2490f3' => 'Head of technology',
    '392bba9e' => 'Features Editor',
    '1e9b5347' => 'Marketing manager (maternity cover)',
    '812d1187' => 'Assistant Features Editor',
    '9de51044' => 'Web product manager',
    '71f01e4f' => 'Associate Features Editor',
    '15fb82ec' => 'Editorial assistant',
    '83a91e14' => 'Editorial manager',
    '9a83d06c' => 'Deputy Editor',
    '81dd36b6' => 'Deputy Editor',
    '6bfd4aee' => 'Deputy Editor',
    '6d42f4fe' => 'Editor-in-Chief',
  ];

  $regex = sprintf('(%s)$', implode('|', array_keys($type_labels)));

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('type', 'person')
    ->condition('uuid', $regex, 'REGEXP');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $node->set('field_person_type_label', $type_labels[substr($node->uuid(), -8)]);
      $node->save();
    }
  }
}

/**
 * Populate values for the person archive value.
 */
function jcms_migrate_update_8102() {
  $archive = [
    '83ab6695',
    'bed596c1',
    'acdc92b1',
    '62450350',
    '4c71d50e',
    '9f117e9f',
    'bbe1a56f',
    '28cdf9a3',
    '896befc2',
    'd1c2ef75',
    '6d832503',
    'ce9247e4',
    'b120b90a',
    '774fcb1f',
    '45b78535',
    '73a5b234',
    'f90fa061',
    '2374625c',
    'd67a3d1c',
    'b646991f',
    'e03b0770',
    '17a0a847',
    'f44bb2c3',
    '2c18fa03',
    'e6e991cd',
    '53abe80c',
    '0727095a',
    'd7a81d21',
    '3b7cdaeb',
    '4e3604d3',
    '565f77cd',
    '7d3c6442',
    'c5aa0c76',
    '9061e2b0',
    'bc3091f0',
    '9ce23ceb',
    '7b499ac0',
    '91a49757',
    '1c6d0910',
    '391fdd44',
    'bdbf1e7c',
    '34a19ccd',
    '9b1e84ca',
    'e377c36a',
    '4c43ef4a',
    '08bafef4',
    '5a9fad63',
    '5e6116f4',
    'e5d7d8fa',
    '1ed3c058',
    '02062d4d',
    'bac09287',
    '741d8bf8',
    'dd8d245a',
    'dab03e92',
    '7067be3c',
    'f2d70fa9',
    'dddb0269',
    '50b172cb',
    '4dea29c6',
    '5a503639',
    '14925f46',
    '29d63ef5',
    'dba72ad7',
    '5e1c1983',
    '21eb245a',
    'd6203622',
    '7874e684',
    '6d188d38',
    '22219a95',
    '8a842bb4',
    '1274260c',
    'bcf192ad',
    'ed12e87c',
    'e0ba592d',
    '47954993',
    '1b6cbc5e',
    '5f003dbb',
    '5884b4cc',
    'f1033ecd',
    'bc360dc8',
    '452bf240',
    '2e20c66b',
    'a5992b16',
    'ce8d7b3c',
    'c87d7387',
    '8640cfc8',
    'bbd26ad3',
    '3e41fae5',
    '00764484',
    'f73e2de7',
    'f695b2bb',
    '0bf4dd90',
    '5bb46fb8',
    'bca4aeb4',
    '8dd19818',
    'abd2b3e5',
    'e999d9c9',
    '203c3411',
    '8590f6ed',
    '87d30a89',
    'eaff3d5c',
    '65293f72',
    'c7856180',
    '3f90be64',
  ];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('type', 'person');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $node->set('field_archive', (in_array(substr($node->uuid(), -8), $archive)) ? 1 : 0);
      $node->save();
    }
  }
}

/**
 * Populate values for the person affiliations.
 */
function jcms_migrate_update_8103() {
  $affiliations = [
    '8ced8829' => [['name' => 'Gregor Mendel Institute of Molecular Plant Biology|Austrian Academy of Sciences', 'country' => 'AT']],
    'c0326404' => [['name' => 'University of Wollongong', 'country' => 'AU']],
    'c642dfe7' => [['name' => 'The Victor Chang Cardiac Research Institute', 'country' => 'AU']],
    'df8047bd' => [['name' => 'University of Melbourne', 'country' => 'AU']],
    'dfe7a8e6' => [['name' => 'McGill University', 'country' => 'CA']],
    '7cf5ce47' => [['name' => 'McGill University', 'country' => 'CA']],
    'db9fc906' => [['name' => 'McGill University', 'country' => 'CA']],
    '69369662' => [['name' => 'The Samuel Lunenfeld Research Institute', 'country' => 'CA']],
    '963873f2' => [['name' => 'University of British Columbia', 'country' => 'CA']],
    '43a400bd' => [['name' => 'University of British Columbia', 'country' => 'CA']],
    '0f8e4d16' => [['name' => 'University of Toronto', 'country' => 'CA']],
    '96749c7d' => [['name' => 'University of Toronto', 'country' => 'CA']],
    '5fca881a' => [['name' => 'Western University', 'country' => 'CA']],
    '185a8271' => [['name' => 'Toronto Western Research Institute|University Health Network', 'country' => 'CA']],
    'ee57f133' => [['name' => 'University of Lausanne', 'country' => 'CH']],
    'ba98e221' => [['name' => 'ETH Zürich', 'country' => 'CH']],
    'b2fd518c' => [['name' => 'University of Geneva', 'country' => 'CH']],
    'ba42c77b' => [['name' => 'Ecole Polytechnique Fédérale de Lausanne', 'country' => 'CH']],
    '28822c2d' => [['name' => 'University of Zurich and ETH Zurich', 'country' => 'CH']],
    '51b42473' => [['name' => 'University of Zurich', 'country' => 'CH']],
    '1ef108f0' => [['name' => 'University of Basel', 'country' => 'CH']],
    '3d777c8b' => [['name' => 'National Institute of Biological Sciences', 'country' => 'CN']],
    '8360aa9f' => [['name' => 'Zhejiang University School of Medicine', 'country' => 'CN']],
    'fd8295ba' => [['name' => 'Institute of Biophysics Chinese Academy of Sciences', 'country' => 'CN']],
    '219a172b' => [['name' => 'Chinese Academy of Sciences|Beijing', 'country' => 'CN']],
    '9ef396f6' => [['name' => 'Max Planck Institute for Developmental Biology', 'country' => 'DE']],
    '175027da' => [['name' => 'Max Planck Institute for Developmental Biology', 'country' => 'DE']],
    '35351880' => [['name' => 'Max Planck Institute for Biophysics', 'country' => 'DE']],
    '88d468fe' => [['name' => 'Friedrich Schiller University Jena and Hans-Knöll-Institut', 'country' => 'DE']],
    '94c20510' => [['name' => 'Goethe University', 'country' => 'DE']],
    'b481fefb' => [['name' => 'Max Planck Institute for Biophysical Chemistry', 'country' => 'DE']],
    'c8abc14f' => [['name' => 'Max Planck Institute of Molecular Cell Biology and Genetics', 'country' => 'DE']],
    '7bc165f1' => [['name' => 'Max Planck Institute of Molecular Cell Biology and Genetics', 'country' => 'DE']],
    '12c21a6d' => [['name' => 'University of Tübingen', 'country' => 'DE']],
    '8d136027' => [['name' => 'Max Planck Institute for Immunobiology and Epigenetics', 'country' => 'DE']],
    '0c23b048' => [['name' => 'Charité', 'country' => 'DE']],
    '34010a3f' => [['name' => 'Max Planck Institute for the Physics of Complex Systems', 'country' => 'DE']],
    'a57c7135' => [['name' => 'University of Freiburg', 'country' => 'DE']],
    '5164e35c' => [['name' => 'Max Planck Institute of Neurobiology', 'country' => 'DE']],
    '590b9a04' => [['name' => 'Max Planck Institute of Molecular Physiology', 'country' => 'DE']],
    '31e45b68' => [['name' => 'Max Planck Institute of Molecular Physiology', 'country' => 'DE']],
    'dd35588b' => [['name' => 'Max Planck Institute of Biochemistry', 'country' => 'DE']],
    '5a5e9e57' => [['name' => 'Max Planck Institute of Biochemistry', 'country' => 'DE']],
    '6a91c06b' => [['name' => 'Max Planck Institute of Biochemistry', 'country' => 'DE']],
    'c43d4988' => [['name' => 'Max Planck Institute for Ornithology', 'country' => 'DE']],
    '5cc4f394' => [['name' => 'Max Planck Institute for Infection Biology', 'country' => 'DE']],
    '94da49ab' => [['name' => 'Max Planck Institute for Developmental Biology', 'country' => 'DE']],
    '2d107d48' => [['name' => 'Max Delbruck Centre for Molecular Medicine', 'country' => 'DE']],
    '30d9e973' => [['name' => 'University Medical Center Hamburg-Eppendorf', 'country' => 'DE']],
    '56a235ab' => [['name' => 'Aarhus University', 'country' => 'DK']],
    '5d31f98e' => [['name' => 'University of Tartu', 'country' => 'EE']],
    '78b25132' => [['name' => 'Centre for Genomic Regulation', 'country' => 'ES']],
    'e29e99ba' => [['name' => 'University of Seville', 'country' => 'ES']],
    '8b61883b' => [['name' => 'Barcelona Supercomputing Center', 'country' => 'ES']],
    '0e030f28' => [['name' => 'University of Helsinki', 'country' => 'FI']],
    '7661a320' => [['name' => 'University of Helsinki', 'country' => 'FI']],
    '387fc60f' => [['name' => 'Institut Pasteur', 'country' => 'FR']],
    'ac9ec989' => [['name' => 'Institut Pasteur', 'country' => 'FR']],
    'faf82a7f' => [['name' => 'Institute of Human Genetics|CNRS', 'country' => 'FR']],
    '84ecc6e9' => [['name' => 'Institut de Genetique et de Biologie Moleculaire et Cellulaire|CNRS/INSERM/UDS', 'country' => 'FR']],
    '7c909693' => [['name' => 'Aix-Marseille University', 'country' => 'FR']],
    '928a5725' => [['name' => 'Institut Curie', 'country' => 'FR']],
    'f78f3df1' => [['name' => 'Ecole normale superieure', 'country' => 'FR']],
    '2e6f0071' => [['name' => 'Institut de Neurobiologie de la M&#xE9;diterran&#xE9;e (INMED)', 'country' => 'FR']],
    '3b7228f2' => [['name' => 'Medical Research Council Laboratory of Molecular Biology', 'country' => 'GB']],
    '8d1667b8' => [['name' => 'Medical Research Council Laboratory of Molecular Biology', 'country' => 'GB']],
    'ef1e7dbe' => [['name' => 'Medical Research Council Laboratory of Molecular Biology', 'country' => 'GB']],
    '208da834' => [['name' => 'University College London', 'country' => 'GB']],
    '0a8a61fe' => [['name' => 'University College London', 'country' => 'GB']],
    '10ba1585' => [['name' => 'Oxford University', 'country' => 'GB']],
    '17a3e8af' => [['name' => 'Oxford University', 'country' => 'GB']],
    'a7b173e5' => [['name' => 'Cambridge University', 'country' => 'GB']],
    '562fe247' => [['name' => 'Cambridge University', 'country' => 'GB']],
    'cd42a76c' => [['name' => 'Cambridge University', 'country' => 'GB']],
    'a29361a5' => [['name' => 'University College London', 'country' => 'GB']],
    '8f2d1669' => [['name' => 'University College London', 'country' => 'GB']],
    '6b44e1fc' => [['name' => 'Temasek Life Sciences Laboratory (Singapore) & University of Warwick', 'country' => 'GB']],
    'e22ea4dd' => [['name' => 'University of Sheffield', 'country' => 'GB']],
    '8596fead' => [['name' => 'MRC Centre for Regenerative Medicine|University of Edinburgh', 'country' => 'GB']],
    '308fe8a4' => [['name' => 'London School of Hygiene & Tropical Medicine, and Public Health England', 'country' => 'GB']],
    '7f595633' => [['name' => 'University of Cambridge', 'country' => 'GB']],
    '43231643' => [['name' => 'University of Cambridge', 'country' => 'GB']],
    'b8db1ef9' => [['name' => 'University of Cambridge', 'country' => 'GB']],
    'edb4d981' => [['name' => 'University of Oxford', 'country' => 'GB']],
    '2f140ffb' => [['name' => 'University of Oxford', 'country' => 'GB']],
    'c87b09e3' => [['name' => 'University of Oxford', 'country' => 'GB']],
    'e0d2c8a1' => [['name' => 'University of Oxford', 'country' => 'GB']],
    'd2537c92' => [['name' => 'University of Oxford', 'country' => 'GB']],
    '67efb8a8' => [['name' => 'University of Oxford', 'country' => 'GB']],
    'dbfcf945' => [['name' => 'Cambridge Cancer Center', 'country' => 'GB']],
    '9b9e6931' => [['name' => 'University of Edinburgh', 'country' => 'GB']],
    '7eaefcf7' => [['name' => 'University of Liverpool', 'country' => 'GB']],
    'b4f05dee' => [['name' => 'King\'s College London', 'country' => 'GB']],
    'a9de5c63' => [['name' => 'Imperial College London', 'country' => 'GB']],
    '1aa89eb5' => [['name' => 'Imperial College London', 'country' => 'GB']],
    '559df510' => [['name' => 'University of St Andrews', 'country' => 'GB']],
    '6569ea83' => [['name' => 'MRC Laboratory of Molecular Biology (Cambridge)', 'country' => 'GB']],
    '4f651dd4' => [['name' => 'Hong Kong University of Science and Technology', 'country' => 'HK']],
    '6c8836e5' => [['name' => 'Semmelweis University', 'country' => 'HU']],
    '2d1c6747' => [['name' => 'Trinity College|Dublin', 'country' => 'IE']],
    'eeed1d1f' => [['name' => 'The Hebrew University of Jerusalem', 'country' => 'IL']],
    'cad03aae' => [['name' => 'Tel Aviv University', 'country' => 'IL']],
    '6c0232aa' => [['name' => 'Tel Aviv University', 'country' => 'IL']],
    'c51db389' => [['name' => 'Tel Aviv University', 'country' => 'IL']],
    'fa6023cd' => [['name' => 'The Weizmann Institute of Science', 'country' => 'IL']],
    'f58c4b7b' => [['name' => 'National Institute of Immunology', 'country' => 'IN']],
    '8e6e6972' => [['name' => 'National Centre for Biological Sciences', 'country' => 'IN']],
    '5c4c4d60' => [['name' => 'FIRC Institute of Molecular Oncology', 'country' => 'IT']],
    '5650503f' => [['name' => 'University of Tokyo', 'country' => 'JP']],
    '871348da' => [['name' => 'Osaka University', 'country' => 'JP']],
    '71581b17' => [['name' => 'Osaka University', 'country' => 'JP']],
    '2ab3ac6d' => [['name' => 'RIKEN Brain Science Institute', 'country' => 'JP']],
    '72b4ca00' => [['name' => 'Africa Population Health Research Center', 'country' => 'KE']],
    '0775cfdd' => [['name' => 'Korea Advanced Institute of Science and Technology', 'country' => 'KR']],
    'b6276db2' => [['name' => 'Universidad Nacional Autónoma de México', 'country' => 'MX']],
    'e6924dae' => [['name' => 'Wageningen University', 'country' => 'NL']],
    '9a1fe272' => [['name' => 'University of Amsterdam', 'country' => 'NL']],
    '11ffd962' => [['name' => 'Radboud University Medical Centre', 'country' => 'NL']],
    '4b6e2030' => [['name' => 'The Netherlands Cancer Institute', 'country' => 'NL']],
    '4568ad0b' => [['name' => 'University of Warsaw', 'country' => 'PL']],
    '2e9695c3' => [['name' => 'Karolinska Institute', 'country' => 'SE']],
    'b4ccda06' => [['name' => 'Temasek Life Sciences Laboratory and National University of Singapore', 'country' => 'SG']],
    '87f34696' => [['name' => 'National University of Singapore & Temasek Life Sciences Laboratory', 'country' => 'SG']],
    '4e2554d4' => [['name' => 'Agency for Science|Technology and Research (A*STAR)', 'country' => 'SG']],
    '241ebd2a' => [['name' => 'Mahidol Oxford Tropical Medicine Research Unit', 'country' => 'TH']],
    'dca010f6' => [['name' => 'University of California|Los Angeles', 'country' => 'US']],
    'aa3a0b9d' => [['name' => 'University of California|Los Angeles', 'country' => 'US']],
    '58a9c1d6' => [['name' => 'University of California|Los Angeles', 'country' => 'US']],
    '6729658e' => [['name' => 'University of California|Los Angeles', 'country' => 'US']],
    '6f59f7d4' => [['name' => 'University of California|Los Angeles', 'country' => 'US']],
    'f48f660d' => [['name' => 'University of California|Los Angeles', 'country' => 'US']],
    '3f5d0dc0' => [['name' => 'University of California|Berkeley', 'country' => 'US']],
    '3805031d' => [['name' => 'University of California|Berkeley', 'country' => 'US']],
    '6fabd619' => [['name' => 'University of California|Berkeley', 'country' => 'US']],
    'da39881d' => [['name' => 'University of California|Berkeley', 'country' => 'US']],
    'cb5882b4' => [['name' => 'University of California|Berkeley', 'country' => 'US']],
    '259e7971' => [['name' => 'University of California|Berkeley', 'country' => 'US']],
    '0e4fb553' => [['name' => 'University of California|Berkeley', 'country' => 'US']],
    '2b0da913' => [['name' => 'University of California|Berkeley', 'country' => 'US']],
    'bcaa3d64' => [['name' => 'University of California|Berkeley', 'country' => 'US']],
    '1d307da9' => [['name' => 'UT Southwestern Medical Center', 'country' => 'US']],
    'a364c7fb' => [['name' => 'UT Southwestern Medical Center', 'country' => 'US']],
    'b999293a' => [['name' => 'UT Southwestern Medical Center', 'country' => 'US']],
    'd83dd1b8' => [['name' => 'UT Southwestern Medical Center', 'country' => 'US']],
    'ba28cff9' => [['name' => 'UT Southwestern Medical Center', 'country' => 'US']],
    '58a799dd' => [['name' => 'UT Southwestern Medical Center', 'country' => 'US']],
    '22ad8984' => [['name' => 'Salk Institute for Biological Studies', 'country' => 'US']],
    '19b9f8cf' => [['name' => 'Salk Institute for Biological Studies', 'country' => 'US']],
    '4f65c2fa' => [['name' => 'Harvard Medical School', 'country' => 'US']],
    '8dc46c93' => [['name' => 'Harvard Medical School', 'country' => 'US']],
    '0a6e12d4' => [['name' => 'Harvard Medical School', 'country' => 'US']],
    'b4120265' => [['name' => 'Harvard Medical School', 'country' => 'US']],
    '2f1a3ce1' => [['name' => 'Harvard Medical School', 'country' => 'US']],
    'cffad9d9' => [['name' => 'Johns Hopkins University', 'country' => 'US']],
    'c503014a' => [['name' => 'Scripps Research Institute', 'country' => 'US']],
    '75018cb5' => [['name' => 'University of Massachusetts Medical School', 'country' => 'US']],
    '7aaaf3b8' => [['name' => 'University of Massachusetts Medical School', 'country' => 'US']],
    'fb77ad9a' => [['name' => 'University of Massachusetts Medical School', 'country' => 'US']],
    '64e6f8ca' => [['name' => 'University of Massachusetts Medical School', 'country' => 'US']],
    'e105b8b8' => [['name' => 'University of Massachusetts Medical School', 'country' => 'US']],
    '9a3aef5f' => [['name' => 'University of Washington', 'country' => 'US']],
    'd73755b8' => [['name' => 'University of Washington', 'country' => 'US']],
    '2f4f2c77' => [['name' => 'University of Washington', 'country' => 'US']],
    '4fc499f3' => [['name' => 'University of Washington', 'country' => 'US']],
    '1b3dc21e' => [['name' => 'California Institute of Technology', 'country' => 'US']],
    'c397a1e9' => [['name' => 'California Institute of Technology', 'country' => 'US']],
    'eafecc38' => [['name' => 'California Institute of Technology', 'country' => 'US']],
    'aaf2a65b' => [['name' => 'California Institute of Technology', 'country' => 'US']],
    '33803249' => [['name' => 'Cold Spring Harbor Laboratory', 'country' => 'US']],
    '45b6f334' => [['name' => 'University of California|San Diego', 'country' => 'US']],
    '08edd00c' => [['name' => 'University of California|San Diego', 'country' => 'US']],
    'f5a3dbb3' => [['name' => 'University of California|San Diego', 'country' => 'US']],
    '398616a9' => [['name' => 'University of California|San Diego', 'country' => 'US']],
    '1097eb3e' => [['name' => 'University of California|San Diego', 'country' => 'US']],
    '993041c7' => [['name' => 'University of California|Davis', 'country' => 'US']],
    '0a109764' => [['name' => 'University of California|Davis', 'country' => 'US']],
    '11b373f7' => [['name' => 'Case Western Reserve University', 'country' => 'US']],
    '0d60d610' => [['name' => 'University of Chicago', 'country' => 'US']],
    '67b7c82e' => [['name' => 'University of Chicago', 'country' => 'US']],
    'fc539b13' => [['name' => 'University of Chicago', 'country' => 'US']],
    '22349f27' => [['name' => 'Northwestern University Feinberg School of Medicine', 'country' => 'US']],
    'a9c18fcc' => [['name' => 'University of Illinois at Urbana Champaign', 'country' => 'US']],
    'fd335e38' => [['name' => 'Stanford University', 'country' => 'US']],
    'e06460ee' => [['name' => 'Stanford University', 'country' => 'US']],
    '39600734' => [['name' => 'Stanford University', 'country' => 'US']],
    'b7d6aeaa' => [['name' => 'Stanford University', 'country' => 'US']],
    '4db9a7ba' => [['name' => 'Stanford University', 'country' => 'US']],
    'a07493f4' => [['name' => 'Stanford University', 'country' => 'US']],
    '05d982dd' => [['name' => 'Stanford University', 'country' => 'US']],
    '8eefc7b2' => [['name' => 'Stanford University', 'country' => 'US']],
    '0aaa3ee0' => [['name' => 'Stanford University', 'country' => 'US']],
    'd168ee7a' => [['name' => 'Stanford University', 'country' => 'US']],
    '835d990d' => [['name' => 'Massachusetts Institute of Technology', 'country' => 'US']],
    'c580dbca' => [['name' => 'University of Utah', 'country' => 'US']],
    '6be2b2c0' => [['name' => 'University of Utah', 'country' => 'US']],
    '272f4b0c' => [['name' => 'University of Utah', 'country' => 'US']],
    '7d3afff9' => [['name' => 'University of Utah', 'country' => 'US']],
    '0e846713' => [['name' => 'Harvard University', 'country' => 'US']],
    '8d208813' => [['name' => 'Harvard University', 'country' => 'US']],
    '1e9399d5' => [['name' => 'Harvard University', 'country' => 'US']],
    '41e6f3ba' => [['name' => 'Harvard University', 'country' => 'US']],
    '82db3403' => [['name' => 'University of Pennsylvania', 'country' => 'US']],
    '28cb41c6' => [['name' => 'University of Pennsylvania', 'country' => 'US']],
    'cad78cfc' => [['name' => 'University of Pennsylvania', 'country' => 'US']],
    '89d3b1c7' => [['name' => 'University of California|San Francisco', 'country' => 'US']],
    'f889ee50' => [['name' => 'University of California|San Francisco', 'country' => 'US']],
    '3cccf500' => [['name' => 'University of California|San Francisco', 'country' => 'US']],
    'af61313d' => [['name' => 'University of California|San Francisco', 'country' => 'US']],
    '547478c9' => [['name' => 'University of Colorado Denver School of Medicine', 'country' => 'US']],
    'aadb2db2' => [['name' => 'Columbia University', 'country' => 'US']],
    'fc8bbac8' => [['name' => 'Columbia University', 'country' => 'US']],
    'dc81dbf8' => [['name' => 'Columbia University', 'country' => 'US']],
    'e3ce6f29' => [['name' => 'Columbia University', 'country' => 'US']],
    'ad3e45e5' => [['name' => 'Columbia University', 'country' => 'US']],
    'ec1f9c13' => [['name' => 'Columbia University', 'country' => 'US']],
    'aad4b275' => [['name' => 'Memorial Sloan Kettering Cancer Center', 'country' => 'US']],
    '7c928feb' => [['name' => 'Memorial Sloan Kettering Cancer Center', 'country' => 'US']],
    '626cbb61' => [['name' => 'Memorial Sloan Kettering Cancer Center', 'country' => 'US']],
    'fca4700e' => [['name' => 'New York University', 'country' => 'US']],
    '36305865' => [['name' => 'New York University', 'country' => 'US']],
    '6ce3402a' => [['name' => 'Stowers Institute for Medical Research', 'country' => 'US']],
    '4c7982c9' => [['name' => 'Stowers Institute for Medical Research', 'country' => 'US']],
    '158699ca' => [['name' => 'Albert Einstein College of Medicine', 'country' => 'US']],
    '1f1d866d' => [['name' => 'National Institute of Neurological Disorders and Stroke', 'country' => 'US']],
    '21e928a6' => [['name' => 'National Institute of Neurological Disorders and Stroke', 'country' => 'US']],
    '591a893a' => [['name' => 'Rockefeller University', 'country' => 'US']],
    '8954c1e6' => [['name' => 'Gladstone Institutes', 'country' => 'US']],
    '28b70d99' => [['name' => 'Gladstone Institutes', 'country' => 'US']],
    'fab2b868' => [['name' => 'Boyce Thompson Institute for Plant Research', 'country' => 'US']],
    'e360a72a' => [['name' => 'University of Michigan', 'country' => 'US']],
    '81c7adf8' => [['name' => 'University of Wisconsin', 'country' => 'US']],
    'dde51d06' => [['name' => 'National Cancer Institute', 'country' => 'US']],
    'ca22dd6b' => [['name' => 'National Institute of Child Health and Human Development', 'country' => 'US']],
    '7610139a' => [['name' => 'Brandeis University', 'country' => 'US']],
    '16c61bb3' => [['name' => 'Brandeis University', 'country' => 'US']],
    '56d504c2' => [['name' => 'Brandeis University', 'country' => 'US']],
    '89a493aa' => [['name' => 'National Institute of Allergy and Infectious Diseases', 'country' => 'US']],
    'a559a40b' => [['name' => 'Yale University', 'country' => 'US']],
    'fab514a7' => [['name' => 'Yale University', 'country' => 'US']],
    'fad15a77' => [['name' => 'Yale University', 'country' => 'US']],
    '7c40c31f' => [['name' => 'Emory University', 'country' => 'US']],
    '1239d370' => [['name' => 'Boston University', 'country' => 'US']],
    'a279b74f' => [['name' => 'Boston University', 'country' => 'US']],
    '0c890262' => [['name' => 'University of California|San Diego School of Medicine', 'country' => 'US']],
    'ad7dc9b2' => [['name' => 'Johns Hopkins University School of Medicine', 'country' => 'US']],
    '4492353d' => [['name' => 'Johns Hopkins University School of Medicine', 'country' => 'US']],
    '84e83776' => [['name' => 'Johns Hopkins University School of Medicine', 'country' => 'US']],
    'ba74c546' => [['name' => 'Johns Hopkins University School of Medicine', 'country' => 'US']],
    '4f3b8e54' => [['name' => 'Northwestern University', 'country' => 'US']],
    '7db0e461' => [['name' => 'University of Texas Southwestern Medical Center', 'country' => 'US']],
    'acfda950' => [['name' => 'The Rockefeller University', 'country' => 'US']],
    '2bf3e5fe' => [['name' => 'Baylor College of Medicine', 'country' => 'US']],
    'f3d16e39' => [['name' => 'New York University School of Medicine', 'country' => 'US']],
    '635fa942' => [['name' => 'Howard Hughes Medical Institute|Johns Hopkins University School of Medicine', 'country' => 'US']],
    '0d8a8840' => [['name' => 'Yale University School of Medicine', 'country' => 'US']],
    '759736a5' => [['name' => 'Yale University School of Medicine', 'country' => 'US']],
    '3c513d23' => [['name' => 'Walter Reed Army Institute of Research', 'country' => 'US']],
    '1c3ee61b' => [['name' => 'Stanford School of Medicine', 'country' => 'US']],
    '4fa9d072' => [['name' => 'Harvard School of Public Health', 'country' => 'US']],
    '551cd02c' => [['name' => 'Howard Hughes Medical Institute|University of Michigan', 'country' => 'US']],
    '94dc35a3' => [['name' => 'National Heart, Lung, and Blood Institute|National Institutes of Health', 'country' => 'US']],
    '07780332' => [['name' => 'DE Shaw Research', 'country' => 'US']],
    '48e0616e' => [['name' => 'University of California San Diego', 'country' => 'US']],
    '7dad4bb7' => [['name' => 'University of California San Diego', 'country' => 'US']],
    'a0ac1430' => [['name' => 'Brown University', 'country' => 'US']],
    'a8ed758f' => [['name' => 'The Icahn School of Medicine at Mount Sinai', 'country' => 'US']],
    '447a936e' => [['name' => 'The Icahn School of Medicine at Mount Sinai', 'country' => 'US']],
    'e39394bc' => [['name' => 'The Icahn School of Medicine at Mount Sinai', 'country' => 'US']],
    '12f75ac1' => [['name' => 'St. Jude Children\'s Research Hospital', 'country' => 'US']],
    '385f5554' => [['name' => 'Howard Hughes Medical Institute|Harvard Medical School', 'country' => 'US']],
    '32419dbe' => [['name' => 'Harvard Stem Cell Institute|Harvard University', 'country' => 'US']],
    'a963bbd9' => [['name' => 'Howard Hughes Medical Institute|University of Washington', 'country' => 'US']],
    '68addc67' => [['name' => 'Oregon Health and Science University', 'country' => 'US']],
    'a818b342' => [['name' => 'Rutgers University', 'country' => 'US']],
    '510b7c69' => [['name' => 'Carnegie Institution for Science', 'country' => 'US']],
    '74ba695a' => [['name' => 'Carnegie Institution for Science', 'country' => 'US']],
    '111c5686' => [['name' => 'Seattle Children\'s Research Institute and University of Washington', 'country' => 'US']],
    '96e6e531' => [['name' => 'Janelia Research Campus', 'country' => 'US']],
    '86d8ddeb' => [['name' => 'Janelia Research Campus', 'country' => 'US']],
    '8efd635a' => [['name' => 'Vanderbilt University', 'country' => 'US']],
    '453a3270' => [['name' => 'Vanderbilt University', 'country' => 'US']],
    'a5e9e476' => [['name' => 'UC Berkeley', 'country' => 'US']],
    '145b6dd9' => [['name' => 'Washington University School of Medicine', 'country' => 'US']],
    '45718a7e' => [['name' => 'University of Missouri', 'country' => 'US']],
    '6d9de0fe' => [['name' => 'Weill Cornell Medical College', 'country' => 'US']],
    'e23c8ecb' => [['name' => 'Washington University', 'country' => 'US']],
    '2dd5ed97' => [['name' => 'Massachusetts General Hospital', 'country' => 'US']],
    '8291b653' => [['name' => 'Calico Labs', 'country' => 'US']],
    '28c75e8f' => [['name' => 'University of Rochester', 'country' => 'US']],
    'ee77b143' => [['name' => 'Boston Children\'s Hospital', 'country' => 'US']],
    'ae6e498c' => [['name' => 'University of Virginia', 'country' => 'US']],
    'ffce16b6' => [['name' => 'Columbia University', 'country' => 'US']],
    'f7114cfd' => [['name' => 'Wake Forest School of Medicine', 'country' => 'US']],
    'e5325f6a' => [['name' => 'Duke University Medical Center', 'country' => 'US']],
    '64955be2' => [['name' => 'University of Minnesota', 'country' => 'US']],
    'd35a16db' => [['name' => 'Pennsylvania State University', 'country' => 'US']],
    '3006114d' => [['name' => 'Fred Hutchinson Cancer Research Center', 'country' => 'US']],
    '220c22e2' => [['name' => 'University of Maryland', 'country' => 'US']],
    '1177a97a' => [['name' => 'University of Wisconsin - Madison', 'country' => 'US']],
    '5a4ba5d3' => [['name' => 'Stanford University School of Medicine', 'country' => 'US']],
    'bbde30e1' => [['name' => 'Stanford University School of Medicine', 'country' => 'US']],
    'b256d288' => [['name' => 'Stanford University School of Medicine', 'country' => 'US']],
    '6860c596' => [['name' => 'University of Alabama at Birmingham', 'country' => 'US']],
    'd4e6145c' => [['name' => 'Columbia University College of Physicians and Surgeons', 'country' => 'US']],
    '05a6593b' => [['name' => 'Maine Medical Center Research Institute', 'country' => 'US']],
    'd1a65d0c' => [['name' => 'University of California|Santa Barbara', 'country' => 'US']],
    '18841226' => [['name' => 'The Wistar Institute', 'country' => 'US']],
    '9eeffefc' => [['name' => 'Indiana University Bloomington', 'country' => 'US']],
    '93a467c6' => [['name' => 'University of Colorado Anschutz Medical Campus', 'country' => 'US']],
    '3b406e3d' => [['name' => 'Ragon Institute of MGH, MIT and Harvard', 'country' => 'US']],
    'aa951e3e' => [['name' => 'Princeton University', 'country' => 'US']],
    '4a9b86cd' => [['name' => 'National Institute on Drug Abuse', 'country' => 'US']],
    'dab38142' => [['name' => 'CAPRISA', 'country' => 'ZA']],
    'a7dcf257' => [['name' => 'University of the Witwatersrand', 'country' => 'ZA']],
  ];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('type', 'person');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $id = substr($node->uuid(), -8);
      if (isset($affiliations[$id])) {
        $paragraphs = [];
        foreach ($affiliations[$id] as $affiliation) {
          $values = [
            'type' => 'affiliation',
            'field_block_title_multiline' => [
              'value' => preg_replace('/\|/', "\n", $affiliation['name']),
            ],
            'field_block_country' => ['value' => $affiliation['country']],
          ];
          $paragraph = Paragraph::create($values);
          $paragraph->save();
          $paragraphs[] = [
            'target_id' => $paragraph->id(),
            'target_revision_id' => $paragraph->getRevisionId(),
          ];
        }
        if (!empty($paragraphs)) {
          $node->set('field_person_affiliation', $paragraphs);
          $node->save();
        }
      }
    }
  }
}

/**
 * Drop migrate_map_* and migrate_message_* tables.
 */
function jcms_migrate_update_8104() {
  $db_conn = Database::getConnection();
  $tables = $db_conn->query("SHOW TABLES LIKE 'migrate_%'")->fetchCol();

  foreach ($tables as $table) {
    if (preg_match('/^migrate_(map|message)_jcms_(?!subjects_json).*$/', $table)) {
      $db_conn->schema()->dropTable($table);
      \Drupal::logger('jcms_migrate')
        ->notice(
          'Dropped table: @table',
          ['@table' => $table]
        );
    }
  }
}

/**
 * Amend content publication dates.
 */
function jcms_migrate_update_8105() {
  $content = [
    'd63e2e42' => '2017-04-06',
    '8bfa8745' => '2017-03-07',
    '8ee45992' => '2016-06-02',
    'ecac3e6a' => '2016-05-24',
  ];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('uuid', '(' . implode('|', array_keys($content)) . ')', 'REGEXP')
    ->condition('type', 'press_package');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $id = substr($node->uuid(), -8);
      $current = $node->getCreatedTime();
      $node->set('created', strtotime($content[$id] . ' ' . date('H:i:s', $current)));
      $node->save();
    }
  }
}

/**
 * Populate field_order_date.
 */
function jcms_migrate_update_8106(&$sandbox) {
  // Unsure we have current element set to 0.
  if (!isset($sandbox['current'])) {
    $sandbox['current'] = 0;
    $sandbox['total'] = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->notExists('field_order_date')
      ->count()
      ->execute();
  }
  $items_per_batch = 200;

  $nodes = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->notExists('field_order_date')
    ->sort('nid', 'ASC')
    ->range(0, $items_per_batch)
    ->execute();

  if (empty($nodes)) {
    $sandbox['#finished'] = 1;
  }
  else {
    $node_presave = \Drupal::service('jcms_article.hooks.node_presave');
    foreach ($nodes as $nid) {
      $node = Node::load($nid);
      if ($node->bundle() == 'article') {
        $article = $node_presave->getArticleById($node->label());
        $node_presave->setStatusDate($node, $article);
        $node_presave->setPublishedDate($node, $article);
      }

      $node->save();
      \Drupal::logger('jcms_miagrate')
        ->notice(
          'field_order_date has been populated for: @type - @title.',
          ['@type' => $node->bundle(), '@title' => $node->label()]
        );
      $sandbox['current']++;
      $sandbox['#finished'] = $sandbox['current'] / $sandbox['total'];
    }
  }
}

/**
 * Amend press package publication date.
 */
function jcms_migrate_update_8107() {
  $content = [
    '7e7220f6' => '2016-09-14',
  ];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('uuid', '(' . implode('|', array_keys($content)) . ')', 'REGEXP')
    ->condition('type', 'press_package');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $id = substr($node->uuid(), -8);
      $current = $node->getCreatedTime();
      $node->set('created', strtotime($content[$id] . ' ' . date('H:i:s', $current)));
      $node->save();
    }
  }
}

/**
 * Changing field_block_attribution field from text(plain) to text(formatted).
 */
function jcms_migrate_update_8108() {
  $fields = [
    'field_block_attribution' => [
      'table' => 'paragraph__field_block_attribution',
      'revision_table' => 'paragraph_revision__field_block_attribution',
      'format_col' => 'field_block_attribution_format',
    ],
  ];

  $database = \Drupal::database();

  foreach ($fields as $field_name => $f) {
    $table = $f['table'];
    $revision_table = $f['revision_table'];
    // Entity type here.
    $entity_type = 'paragraph';

    // Step 1: Get field storage.
    $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);

    // Check if field not found.
    if (is_null($field_storage)) {
      continue;
    }

    // Step 2: Store data.
    $rows = NULL;
    $revision_rows = NULL;
    if ($database->schema()->tableExists($table)) {
      // The table data to restore after the update is completed.
      $rows = $database->select($table, 'n')->fields('n')->execute()
        ->fetchAll();
      $revision_rows = $database->select($revision_table, 'n')->fields('n')->execute()
        ->fetchAll();
    }

    // Step 3: Save new field configs & delete existing fields.
    $new_fields = [];
    foreach ($field_storage->getBundles() as $bundle => $label) {
      $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
      $new_field = $field->toArray();
      $new_field['field_type'] = 'text_long';
      $new_fields[] = $new_field;
      // Delete field.
      $field->delete();
    }

    // Step 4: Create new storage configs from existing.
    $new_field_storage = $field_storage->toArray();
    $new_field_storage['type'] = 'text_long';
    $new_field_storage['module'] = 'text';
    $new_field_storage['settings'] = [
      'max_length' => 255,
    ];

    // Step 5: Purge deleted fields data.
    // This is required to create new fields.
    field_purge_batch(250);

    // Step 6: Create new fieldstorage.
    FieldStorageConfig::create($new_field_storage)->save();

    // Step 7: Create new fields for all bundles.
    foreach ($new_fields as $new_field) {
      $new_field = FieldConfig::create($new_field);
      $new_field->save();
    }

    // Step 8: Restore existing data in fields & revision tables.
    if (!is_null($rows)) {
      foreach ($rows as $row) {
        $row = (array) $row;
        $row[$f['format_col']] = 'basic_html';
        $database->insert($table)->fields($row)->execute();
      }
    }
    if (!is_null($revision_rows)) {
      foreach ($revision_rows as $row) {
        $row = (array) $row;
        $row[$f['format_col']] = 'basic_html';
        $database->insert($revision_table)->fields($row)->execute();
      }
    }

  }
}

/**
 * Amend blog article publication date.
 */
function jcms_migrate_update_8109() {
  $content = [
    'd457b4cd' => '2017-07-28',
  ];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('uuid', '(' . implode('|', array_keys($content)) . ')', 'REGEXP')
    ->condition('type', 'blog_article');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $id = substr($node->uuid(), -8);
      $current = $node->getCreatedTime();
      $node->set('created', strtotime($content[$id] . ' ' . date('H:i:s', $current)));
      $node->save();
    }
  }
}

/**
 * Amend content publication dates.
 */
function jcms_migrate_update_8110() {
  $content = [
    '0820e5dd' => '2017-10-24',
  ];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('uuid', '(' . implode('|', array_keys($content)) . ')', 'REGEXP')
    ->condition('type', 'press_package');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $id = substr($node->uuid(), -8);
      $current = $node->getCreatedTime();
      $node->set('created', strtotime($content[$id] . ' ' . date('H:i:s', $current)));
      $node->save();
    }
  }
}

/**
 * Enable config_import module.
 */
function jcms_migrate_update_8111() {
  drupal_flush_all_caches();
  \Drupal::service('module_installer')->install(['config_import']);
}

/**
 * Create field: field_content_processed_json.
 */
function jcms_migrate_update_8112() {
  $config_importer = \Drupal::service('config_import.importer');
  $configs = [
    'field.storage.node.field_content_processed_json',
    'field.storage.node.field_person_affiliation_json',
    'field.storage.node.field_person_profile_json',
    'field.storage.node.field_research_details_json',
    'field.field.node.blog_article.field_content_processed_json',
    'field.field.node.event.field_content_processed_json',
    'field.field.node.interview.field_content_processed_json',
    'field.field.node.labs_experiment.field_content_processed_json',
    'field.field.node.person.field_person_affiliation_json',
    'field.field.node.person.field_person_profile_json',
    'field.field.node.person.field_research_details_json',
    'field.field.node.press_package.field_content_processed_json',
  ];
  $config_importer->importConfigs($configs);
}

/**
 * Resave all nodes that need to presave processed output.
 */
function jcms_migrate_update_8113(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    // This must be the first run. Initialize the sandbox.
    $sandbox['progress'] = 0;
    $sandbox['current_pk'] = 0;
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', [
        'blog_article',
        'event',
        'interview',
        'labs_experiment',
        'person',
        'press_package',
      ], 'IN');
    $sandbox['max'] = $query->count()->execute() - 1;
  }

  // Update 20 nodes at a time.
  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('type', [
      'blog_article',
      'event',
      'interview',
      'labs_experiment',
      'person',
      'press_package',
    ], 'IN')
    ->condition('nid', $sandbox['current_pk'], '>')
    ->range(0, 20)
    ->sort('nid', 'ASC');
  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    if (!empty($nodes)) {
      foreach ($nodes as $node) {
        $node->save();
        $sandbox['progress']++;
        $sandbox['current_pk'] = $node->id();
      }
    }
  }
  if (empty($sandbox['max']) ||  $sandbox['progress'] >= $sandbox['max']) {
    $sandbox['#finished'] = TRUE;
  }
  else {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
  }
}

/**
 * Import the MSA biochemistry-chemical-biology.
 */
function jcms_migrate_update_8114() {
  $manager = \Drupal::service('plugin.manager.config_entity_migration');
  $plugins = $manager->createInstances([]);
  $executable = new MigrateExecutable($plugins['jcms_subjects_json'], new MigrateMessage());
  $executable->import();
}

/**
 * Remove biochemistry and immunology msa.
 */
function jcms_migrate_update_8115() {
  $msa = [
    'biochemistry',
    'immunology',
  ];
  $tids = \Drupal::entityQuery('taxonomy_term')
    ->accessCheck(FALSE)
    ->condition('vid', 'subjects')
    ->condition('field_subject_id.value', $msa, 'IN')
    ->execute();
  $controller = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $entities = $controller->loadMultiple($tids);
  // Delete taxonomy terms.
  $controller->delete($entities);
}

/**
 * Remove biochemistry and immunology msa from migration map.
 */
function jcms_migrate_update_8116() {
  $migrate_id_map = \Drupal::service('plugin.manager.config_entity_migration')->createInstance('jcms_subjects_json')->getIdMap();
  foreach (['biochemistry', 'immunology'] as $msa) {
    $migrate_id_map->delete([$msa]);
  }
}

/**
 * Import the MSA structural-biology-molecular-biophysics.
 */
function jcms_migrate_update_8117() {
  $manager = \Drupal::service('plugin.manager.config_entity_migration');
  $plugins = $manager->createInstances([]);
  $executable = new MigrateExecutable($plugins['jcms_subjects_json'], new MigrateMessage());
  $executable->import();
}

/**
 * Import the MSA physics-living-systems.
 */
function jcms_migrate_update_8118() {
  $manager = \Drupal::service('plugin.manager.config_entity_migration');
  $plugins = $manager->createInstances([]);
  $executable = new MigrateExecutable($plugins['jcms_subjects_json'], new MigrateMessage());
  $executable->import();
}

/**
 * Remove biophysics-structural-biology msa.
 */
function jcms_migrate_update_8119() {
  $msa = [
    'biophysics-structural-biology',
  ];
  $tids = \Drupal::entityQuery('taxonomy_term')
    ->accessCheck(FALSE)
    ->condition('vid', 'subjects')
    ->condition('field_subject_id.value', $msa, 'IN')
    ->execute();
  $controller = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $entities = $controller->loadMultiple($tids);
  // Delete taxonomy terms.
  $controller->delete($entities);

  // Remove from migration map.
  $migrate_id_map = \Drupal::service('plugin.manager.config_entity_migration')->createInstance('jcms_subjects_json')->getIdMap();
  foreach ($msa as $id) {
    $migrate_id_map->delete([$id]);
  }
}

/**
 * Enable config_import module.
 */
function jcms_migrate_update_8120() {
  drupal_flush_all_caches();
  \Drupal::service('module_installer')->install(['config_import']);
}

/**
 * Recreate field: field_aims_and_scope.
 */
function jcms_migrate_update_8121() {
  $subject_tids = \Drupal::entityQuery('taxonomy_term')
    ->accessCheck(FALSE)
    ->condition('vid', 'subjects')->execute();

  $aims = [];
  $subjects = Term::loadMultiple($subject_tids);
  foreach ($subjects as $subject) {
    /* @var Term $subject */
    $value = [];
    foreach ($subject->get('field_aims_and_scope')->referencedEntities() as $paragraph) {
      $view = $paragraph->get('field_block_html')->view();
      unset($view['#theme']);
      $value[] = \Drupal::service('renderer')->renderPlain($view);
    }
    $aims[$subject->id()] = implode(PHP_EOL, $value);
  }
  FieldConfig::loadByName('taxonomy_term', 'subjects', 'field_aims_and_scope')->delete();
  drupal_flush_all_caches();

  $config_importer = \Drupal::service('config_import.importer');
  $configs = [
    'field.storage.taxonomy_term.field_aims_and_scope',
    'field.field.taxonomy_term.subjects.field_aims_and_scope',
    'core.entity_view_display.taxonomy_term.subjects.default',
    'core.entity_form_display.taxonomy_term.subjects.default',
    'migrate_plus.migration.jcms_subjects_json',
  ];
  $config_importer->importConfigs($configs);

  $subjects = Term::loadMultiple(array_keys($aims));
  foreach ($subjects as $subject) {
    $subject->set('field_aims_and_scope', ['value' => $aims[$subject->id()], 'format' => 'basic_html']);
    $subject->save();
  }
}

/**
 * Update taxonomy_term.field_aims_and_scope field.
 */
function jcms_migrate_update_8122() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type_manager->clearCachedDefinitions();

  $entity_type_ids = [];
  $change_summary = \Drupal::service('entity.definition_update_manager')->getChangeSummary();
  foreach ($change_summary as $entity_type_id => $change_list) {
    $entity_type = $entity_type_manager->getDefinition($entity_type_id);
    \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);
    $entity_type_ids[] = $entity_type_id;
  }

  return t("Installed/Updated the entity type(s): @entity_type_ids", [
    '@entity_type_ids' => implode(', ', $entity_type_ids),
  ]);
}

/**
 * Import the MSA chromosomes-gene-expression.
 */
function jcms_migrate_update_8123() {
  $manager = \Drupal::service('plugin.manager.config_entity_migration');
  $plugins = $manager->createInstances([]);
  $executable = new MigrateExecutable($plugins['jcms_subjects_json'], new MigrateMessage());
  $executable->import();
}

/**
 * Remove genes-chromosomes msa.
 */
function jcms_migrate_update_8124() {
  $msa = [
    'genes-chromosomes',
  ];
  $tids = \Drupal::entityQuery('taxonomy_term')
    ->accessCheck(FALSE)
    ->condition('vid', 'subjects')
    ->condition('field_subject_id.value', $msa, 'IN')
    ->execute();
  $controller = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $entities = $controller->loadMultiple($tids);
  // Delete taxonomy terms.
  $controller->delete($entities);

  // Remove from migration map.
  $migrate_id_map = \Drupal::service('plugin.manager.config_entity_migration')->createInstance('jcms_subjects_json')->getIdMap();
  foreach ($msa as $id) {
    $migrate_id_map->delete([$id]);
  }
}

/**
 * Resave all person nodes with a competing interest.
 */
function jcms_migrate_update_8125() {
  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('type', 'person')
    // Limit the person nodes to those with a competing interest.
    ->condition('field_person_competing.format', 'basic_html');
  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    if (!empty($nodes)) {
      foreach ($nodes as $node) {
        $node->save();
      }
    }
  }
}

/**
 * Resave all labs-post nodes.
 */
function jcms_migrate_update_8126() {
  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('type', 'labs_experiment');
  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    if (!empty($nodes)) {
      foreach ($nodes as $node) {
        $node->save();
      }
    }
  }
}

/**
 * Enable config_import module.
 */
function jcms_migrate_update_8127() {
  \Drupal::service('module_installer')->install(['config_import']);
}

/**
 * Update migrate config for attribution import and import new MSA.
 */
function jcms_migrate_update_8128() {
  $config_importer = \Drupal::service('config_import.importer');
  $configs = [
    'migrate_plus.migration.jcms_subjects_json',
  ];
  $config_importer->importConfigs($configs);

  $manager = \Drupal::service('plugin.manager.config_entity_migration');
  $plugins = $manager->createInstances([]);
  $executable = new MigrateExecutable($plugins['jcms_subjects_json'], new MigrateMessage());
  $executable->import();
}

/**
 * Remove genomics-evolutionary-biology msa.
 */
function jcms_migrate_update_8129() {
  // Assign any remaining content to genetics-genomics, there shouldn't be any
  // in production.
  drush_invoke('msa-switch', ['genomics-evolutionary-biology', 'genetics-genomics']);
  $msa = [
    'genomics-evolutionary-biology',
  ];
  $tids = \Drupal::entityQuery('taxonomy_term')
    ->accessCheck(FALSE)
    ->condition('vid', 'subjects')
    ->condition('field_subject_id.value', $msa, 'IN')
    ->execute();
  $controller = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $entities = $controller->loadMultiple($tids);
  // Delete taxonomy terms.
  $controller->delete($entities);

  // Remove from migration map.
  $migrate_id_map = \Drupal::service('plugin.manager.config_entity_migration')->createInstance('jcms_subjects_json')->getIdMap();
  foreach ($msa as $id) {
    $migrate_id_map->delete([$id]);
  }
}

/**
 * Enable config_import module.
 */
function jcms_migrate_update_8130() {
  \Drupal::service('module_installer')->install(['config_import']);
}

/**
 * Update migrate config for attribution import and import new MSA.
 */
function jcms_migrate_update_8131() {
  $config_importer = \Drupal::service('config_import.importer');
  $configs = [
    'migrate_plus.migration.jcms_subjects_json',
  ];
  $config_importer->importConfigs($configs);

  $manager = \Drupal::service('plugin.manager.config_entity_migration');
  $plugins = $manager->createInstances([]);
  $executable = new MigrateExecutable($plugins['jcms_subjects_json'], new MigrateMessage());
  $executable->import();
}

/**
 * Resave all nodes that need to presave processed output.
 */
function jcms_migrate_update_8132(&$sandbox) {
  $types = [
    'blog_article',
    'event',
    'interview',
    'labs_experiment',
    'person',
    'press_package',
  ];
  if (!isset($sandbox['progress'])) {
    // This must be the first run. Initialize the sandbox.
    $sandbox['progress'] = 0;
    $sandbox['current_pk'] = 0;
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', $types, 'IN');
    $sandbox['max'] = $query->count()->execute() - 1;
  }

  // Update 20 nodes at a time.
  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('type', $types, 'IN')
    ->condition('nid', $sandbox['current_pk'], '>')
    ->range(0, 20)
    ->sort('nid', 'ASC');
  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    if (!empty($nodes)) {
      foreach ($nodes as $node) {
        $node->save();
        $sandbox['progress']++;
        $sandbox['current_pk'] = $node->id();
      }
    }
  }
  if (empty($sandbox['max']) ||  $sandbox['progress'] >= $sandbox['max']) {
    $sandbox['#finished'] = TRUE;
  }
  else {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
  }
}

/**
 * Resave all nodes with field_image, not saved in previous update.
 */
function jcms_migrate_update_8133(&$sandbox) {
  $types = [
    'blog_article',
    'event',
    'interview',
    'labs_experiment',
    'person',
    'press_package',
  ];
  if (!isset($sandbox['progress'])) {
    // This must be the first run. Initialize the sandbox.
    $sandbox['progress'] = 0;
    $sandbox['current_pk'] = 0;
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->exists('field_image')
      ->condition('type', $types, 'NOT IN');
    $sandbox['max'] = $query->count()->execute() - 1;
  }

  // Update 20 nodes at a time.
  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->exists('field_image')
    ->condition('type', $types, 'NOT IN')
    ->condition('nid', $sandbox['current_pk'], '>')
    ->range(0, 20)
    ->sort('nid', 'ASC');
  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    if (!empty($nodes)) {
      foreach ($nodes as $node) {
        $node->save();
        $sandbox['progress']++;
        $sandbox['current_pk'] = $node->id();
      }
    }
  }
  if (empty($sandbox['max']) ||  $sandbox['progress'] >= $sandbox['max']) {
    $sandbox['#finished'] = TRUE;
  }
  else {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
  }
}

/**
 * Resave all subjects.
 */
function jcms_migrate_update_8134() {
  $query = \Drupal::entityQuery('taxonomy_term')
    ->accessCheck(FALSE)
    ->condition('vid', 'subjects');
  $tids = $query->execute();
  if ($tids) {
    $terms = Term::loadMultiple($tids);
    if (!empty($terms)) {
      foreach ($terms as $term) {
        $term->save();
      }
    }
  }
}

/**
 * Remove developmental-biology-stem-cells msa.
 */
function jcms_migrate_update_8135() {
  // Assign any remaining content to developmental-biology, there shouldn't be
  // any in production.
  drush_invoke('msa-switch', ['developmental-biology-stem-cells', 'developmental-biology']);
  $msa = [
    'developmental-biology-stem-cells',
  ];
  $tids = \Drupal::entityQuery('taxonomy_term')
    ->accessCheck(FALSE)
    ->condition('vid', 'subjects')
    ->condition('field_subject_id.value', $msa, 'IN')
    ->execute();
  $controller = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $entities = $controller->loadMultiple($tids);
  // Delete taxonomy terms.
  $controller->delete($entities);

  // Remove from migration map.
  $migrate_id_map = \Drupal::service('plugin.manager.config_entity_migration')->createInstance('jcms_subjects_json')->getIdMap();
  foreach ($msa as $id) {
    $migrate_id_map->delete([$id]);
  }
}

/**
 * Enable config_import module.
 */
function jcms_migrate_update_8136() {
  drupal_flush_all_caches();
  \Drupal::service('module_installer')->install(['config_import']);
}

/**
 * Update config to introduce new chapter time field.
 */
function jcms_migrate_update_8137() {
  $config_importer = \Drupal::service('config_import.importer');
  $configs = [
    'field.storage.node.field_chapter_time',
    'field.field.node.podcast_chapter.field_chapter_time',
    'core.extension',
  ];
  $config_importer->importConfigs($configs);
}

/**
 * Populate duration field before discarding the integer time field.
 */
function jcms_migrate_update_8138(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    // This must be the first run. Initialize the sandbox.
    $sandbox['progress'] = 0;
    $sandbox['current_pk'] = 0;
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', 'podcast_chapter');
    $sandbox['max'] = $query->count()->execute() - 1;
  }

  // Update 20 nodes at a time.
  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('type', 'podcast_chapter')
    ->condition('nid', $sandbox['current_pk'], '>')
    ->range(0, 20)
    ->sort('nid', 'ASC');
  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    if (!empty($nodes)) {
      foreach ($nodes as $node) {
        $time = (int) $node->get('field_podcast_chapter_time')->getString();
        $seconds = $time % 60;
        $minutes = ($time - $seconds) / 60;
        $node->set('field_chapter_time', [
          'value' => DurationService::convertValue([
            'minute' => $minutes,
            'second' => $seconds,
          ]),
        ]);
        $node->save();
        $sandbox['progress']++;
        $sandbox['current_pk'] = $node->id();
      }
    }
  }
  if (empty($sandbox['max']) ||  $sandbox['progress'] >= $sandbox['max']) {
    $sandbox['#finished'] = TRUE;
  }
  else {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
  }
}

/**
 * Import all config.
 */
function jcms_migrate_update_8139() {
  drush_invoke('config-import');
}

/**
 * Migrate content to inline editor fields.
 */
function jcms_migrate_update_8140() {
  $types = [
    'blog_article',
    'event',
    'interview',
    'labs_experiment',
    'press_package',
  ];

  foreach ($types as $type) {
    drush_invoke('json-html-migrate', [$type]);
  }
}

/**
 * Delete all paragraph of certain types in preparation for removal.
 */
function jcms_migrate_update_8141() {
  $types = [
    'youtube',
    'table',
    'section',
    'question',
    'list_item',
    'list',
    'image',
    'cv_item',
    'code',
    'button',
    'blockquote',
  ];

  foreach ($types as $type) {
    $paragraphs = \Drupal::entityTypeManager()
      ->getStorage('paragraph')
      ->loadByProperties(['type' => $type]);
    foreach ($paragraphs as $paragraph) {
      $paragraph->delete();
    }
  }
}

/**
 * Import all config.
 */
function jcms_migrate_update_8142() {
  drush_invoke('config-import');
}

/**
 * Import all digest snippets.
 */
function jcms_migrate_update_8143() {
  drush_invoke('digest-import-all');
}

/**
 * Import all config.
 */
function jcms_migrate_update_8144() {
  drush_invoke('config-import');
}

/**
 * Split all person names.
 */
function jcms_migrate_update_8145() {
  drush_invoke('person-name-split');
}

/**
 * Resave person nodes to store index name in title field.
 */
function jcms_migrate_update_8146() {
  drush_invoke('resave-nodes', ['person']);
}

/**
 * Amend content publication dates.
 */
function jcms_migrate_update_8147() {
  $content = [
    '0976e32a' => '2019-01-16',
  ];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('uuid', '(' . implode('|', array_keys($content)) . ')', 'REGEXP')
    ->condition('type', 'interview');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $id = substr($node->uuid(), -8);
      $current = $node->getCreatedTime();
      $node->set('created', strtotime($content[$id] . ' ' . date('H:i:s', $current)));
      $node->save();
    }
  }
}

/**
 * Amend content publication dates.
 */
function jcms_migrate_update_8148() {
  $content = [
    '9231bab7' => '2019-08-30',
  ];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('uuid', '(' . implode('|', array_keys($content)) . ')', 'REGEXP')
    ->condition('type', 'interview');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $id = substr($node->uuid(), -8);
      $current = $node->getCreatedTime();
      $node->set('created', strtotime($content[$id] . ' ' . date('H:i:s', $current)));
      $node->save();
    }
  }
}

/**
 * Amend content publication dates.
 */
function jcms_migrate_update_8149() {
  $content = [
    '9231bab7' => '2019-08-30',
  ];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('uuid', '(' . implode('|', array_keys($content)) . ')', 'REGEXP')
    ->condition('type', 'job_advert');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $id = substr($node->uuid(), -8);
      $current = $node->getCreatedTime();
      $node->set('created', strtotime($content[$id] . ' ' . date('H:i:s', $current)));
      $node->save();
    }
  }
}

/**
 * Amend content publication dates.
 */
function jcms_migrate_update_8150() {
  $content = [
    '09d713c1' => '2019-09-26',
  ];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('uuid', '(' . implode('|', array_keys($content)) . ')', 'REGEXP')
    ->condition('type', 'interview');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $id = substr($node->uuid(), -8);
      $current = $node->getCreatedTime();
      $node->set('created', strtotime($content[$id] . ' ' . date('H:i:s', $current)));
      $node->save();
    }
  }
}

/**
 * Unpublish content.
 */
function jcms_migrate_update_8151() {
  $content = [
    '719e655d',
    'a058ec77',
    'b6365b76',
  ];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('uuid', '(' . implode('|', $content) . ')$', 'REGEXP')
    ->condition('type', 'blog_article');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $node->setUnpublished();
      $node->save();
    }
  }
}

/**
 * Unpublish libero publisher press package.
 */
function jcms_migrate_update_8152() {
  $content = [
    'd5b3c1bf',
  ];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('uuid', '(' . implode('|', $content) . ')$', 'REGEXP')
    ->condition('type', 'press_package');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $node->setUnpublished();
      $node->save();
    }
  }
}

/**
 * Enable config_import module.
 */
function jcms_migrate_update_8153() {
  drupal_flush_all_caches();
  \Drupal::service('module_installer')->install(['config_import']);
}

/**
 * Introduce new MSA - Medicine.
 */
function jcms_migrate_update_8154() {
  $config_importer = \Drupal::service('config_import.importer');
  $configs = [
    'migrate_plus.migration.jcms_subjects_json',
  ];
  $config_importer->importConfigs($configs);

  $manager = \Drupal::service('plugin.manager.config_entity_migration');
  $plugins = $manager->createInstances([]);
  $executable = new MigrateExecutable($plugins['jcms_subjects_json'], new MigrateMessage());
  $executable->import();
}

/**
 * Enable config_import module.
 */
function jcms_migrate_update_8155() {
  drupal_flush_all_caches();
  \Drupal::service('module_installer')->install(['config_import']);
}

/**
 * Update MSA.
 */
function jcms_migrate_update_8156() {
  $config_importer = \Drupal::service('config_import.importer');
  $configs = [
    'migrate_plus.migration.jcms_subjects_json',
  ];
  $config_importer->importConfigs($configs);

  $manager = \Drupal::service('plugin.manager.config_entity_migration');
  $migration = $manager->createInstances([])['jcms_subjects_json'];
  $migration->getIdMap()->prepareUpdate();

  $executable = new MigrateExecutable($migration, new MigrateMessage());
  $executable->import();
}

/**
 * Enable config_import module.
 */
function jcms_migrate_update_8157() {
  drupal_flush_all_caches();
  \Drupal::service('module_installer')->install(['config_import']);
}

/**
 * Update MSA.
 */
function jcms_migrate_update_8158() {
  $config_importer = \Drupal::service('config_import.importer');
  $configs = [
    'migrate_plus.migration.jcms_subjects_json',
  ];
  $config_importer->importConfigs($configs);

  $manager = \Drupal::service('plugin.manager.config_entity_migration');
  $migration = $manager->createInstances([])['jcms_subjects_json'];
  $migration->getIdMap()->prepareUpdate();

  $executable = new MigrateExecutable($migration, new MigrateMessage());
  $executable->import();
}

/**
 * Remove human-biology-medicine msa.
 */
function jcms_migrate_update_8159() {
  $msa = [
    'human-biology-medicine',
  ];
  $tids = \Drupal::entityQuery('taxonomy_term')
    ->accessCheck(FALSE)
    ->condition('vid', 'subjects')
    ->condition('field_subject_id.value', $msa, 'IN')
    ->execute();
  $controller = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $entities = $controller->loadMultiple($tids);
  // Delete taxonomy terms.
  $controller->delete($entities);
}

/**
 * Remove human-biology-medicine msa from migration map.
 */
function jcms_migrate_update_8160() {
  $migrate_id_map = \Drupal::service('plugin.manager.config_entity_migration')->createInstance('jcms_subjects_json')->getIdMap();
  $migrate_id_map->delete(['human-biology-medicine']);
}

/**
 * Enable config_import module.
 */
function jcms_migrate_update_8161() {
  drupal_flush_all_caches();
  \Drupal::service('module_installer')->install(['config_import']);
}

/**
 * Update config to introduce new text format basic_html_plus.
 */
function jcms_migrate_update_8162() {
  $config_importer = \Drupal::service('config_import.importer');
  $configs = [
    'filter.format.basic_html_plus.yml',
  ];
  $config_importer->importConfigs($configs);
}

/**
 * Set format of existing job_adverts to basic_html_plus.
 */
function jcms_migrate_update_8163() {
  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('type', 'job_advert')
    ->sort('nid', 'ASC');
  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    if (!empty($nodes)) {
      foreach ($nodes as $node) {
        foreach ([
          'field_job_advert_role_summary',
          'field_job_advert_respons',
          'field_job_advert_experience',
          'field_job_advert_terms',
        ] as $field) {
          $node->set($field, ['format' => 'basic_html_plus'] + $node->get($field)->getValue()[0]);
        }
        $node->save();
      }
    }
  }
}

/**
 * Enable config_import module.
 */
function jcms_migrate_update_8164() {
  drupal_flush_all_caches();
  \Drupal::service('module_installer')->install(['config_import']);
}

/**
 * Update MSA.
 */
function jcms_migrate_update_8165() {
  $config_importer = \Drupal::service('config_import.importer');
  $configs = [
    'migrate_plus.migration.jcms_subjects_json',
  ];
  $config_importer->importConfigs($configs);

  $manager = \Drupal::service('plugin.manager.config_entity_migration');
  $migration = $manager->createInstances([])['jcms_subjects_json'];
  $migration->getIdMap()->prepareUpdate();

  $executable = new MigrateExecutable($migration, new MigrateMessage());
  $executable->import();
}

/**
 * Enable config_import module.
 */
function jcms_migrate_update_8166() {
  drupal_flush_all_caches();
  \Drupal::service('module_installer')->install(['config_import']);
}

/**
 * Update MSA.
 */
function jcms_migrate_update_8167() {
  $config_importer = \Drupal::service('config_import.importer');
  $configs = [
    'migrate_plus.migration.jcms_subjects_json',
  ];
  $config_importer->importConfigs($configs);

  $manager = \Drupal::service('plugin.manager.config_entity_migration');
  $migration = $manager->createInstances([])['jcms_subjects_json'];
  $migration->getIdMap()->prepareUpdate();

  $executable = new MigrateExecutable($migration, new MigrateMessage());
  $executable->import();
}

/**
 * Amend content publication dates and uuid.
 */
function jcms_migrate_update_8168() {
  $content = [
    'd47836a4' => [
      'created' => '2020-10-12',
      'uuid' => 'bfd36e50-a78a-4d2f-932e-e92c7379e8d5',
    ],
  ];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('uuid', '(' . implode('|', array_keys($content)) . ')', 'REGEXP')
    ->condition('type', 'interview');

  $nids = $query->execute();
  if ($nids) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      $id = substr($node->uuid(), -8);
      $current = $node->getCreatedTime();
      $node->set('created', strtotime($content[$id]['created'] . ' ' . date('H:i:s', $current)));
      $node->set('uuid', $content[$id]['uuid']);
      $node->save();
    }
  }
}
