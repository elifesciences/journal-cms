<?php

/**
 * @file
 * Contains jcms_article.module..
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\jcms_article\Entity\ArticleVersions;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function jcms_article_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the jcms_article module.
    case 'help.page.jcms_article':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Article functionality.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_node_presave().
 */
function jcms_article_node_presave(NodeInterface $node) {
  if ($node->bundle() !== 'article') {
    return NULL;
  }
  $node_presave = \Drupal::service('jcms_article.hooks.node_presave');
  if (!empty($node->migration)) {
    $node_presave->forMigrationOnly();
  }

  $admin_ui = _jcms_admin_static_store('node_article_form_admin_ui');
  $article = FALSE;

  // Only post to the fragmentApi if article node was saved in the admin UI.
  if (!empty($admin_ui)) {
    try {
      $node_presave->updateFragmentApi($node, $node->label());
    }
    catch (Exception $e) {
      \Drupal::messenger()->addError($e->getMessage());
    }
  }

  $crud_service = \Drupal::service('jcms_article.article_crud');

  // Detect if a sample article has be generated.
  if (!preg_match('/^[0-9]{5,}$/', $node->label())) {
    $node->set('title', _jcms_article_entity_title_unique($node));
    $article = new ArticleVersions($node->label(), '');
    $article->generateSampleJson();
    $forceAddJson = TRUE;
  }
  elseif (!$crud_service->getArticle($node, FALSE)) {
    // @todo - elife - nlisgo - Ensure we're not requesting in ArticleCrud and here.
    $article = $node_presave->getArticleById($node->label());
    $forceAddJson = FALSE;
  }

  if ($article instanceof ArticleVersions) {
    // Only update the Json fields in admin UI if the node is new.
    if ($forceAddJson || !empty($node->migration) || (!empty($admin_ui) && $node->isNew())) {
      $node_presave->addJsonFields($node, $article);
    }
  }
  else {
    $article = $crud_service->getNodeArticleVersions($node);
  }

  if (empty($admin_ui) || $node->isNew()) {
    $node_presave->setPublishedStatus($node, $article);
    $node_presave->setStatusDate($node, $article);
    $node_presave->setPublishedDate($node, $article);
    $node_presave->setSubjectTerms($node, $article);
  }
}

/**
 * Create unique entity title.
 *
 * @return string
 *   Unique entity title.
 */
function _jcms_article_entity_title_unique(NodeInterface $node, string $content_type = 'article') {
  $label = (string) rand(10000, 99999);
  $properties = [
    'title' => $label,
    'type' => $content_type,
  ];

  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties($properties);

  if ($node instanceof NodeInterface) {
    unset($nodes[$node->id()]);
  }

  if (!empty($nodes)) {
    return _jcms_article_entity_title_unique($node, $content_type);
  }

  return $label;
}

/**
 * Implements hook_form_alter().
 */
function jcms_article_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _jcms_admin_protect_id_field($form, $form_id);
  switch ($form_id) {
    case 'node_article_form':
    case 'node_article_edit_form':
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          array_unshift($form['actions'][$action]['#submit'], '_jcms_article_form_node_article_edit_form_submit');
        }
      }
      break;
  }
}

/**
 * Submit function for node_article_form and node_article_edit_form.
 */
function _jcms_article_form_node_article_edit_form_submit($form, FormStateInterface $form_state) {
  _jcms_admin_static_store('node_article_form_admin_ui', 1);
}
