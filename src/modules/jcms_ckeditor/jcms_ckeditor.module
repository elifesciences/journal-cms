<?php

/**
 * @file
 * JCMS CKEditor module file.
 */

use Drupal\Core\Site\Settings;
use Drupal\Core\Link;
use Drupal\Core\Entity\EntityInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Url;
use Drupal\ckeditor5\Plugin\CKEditor5PluginDefinition;
use Drupal\getDerivativeDefinitions;

/**
 * Implements hook_page_attachments().
 *
 * Add inline editor libraries on all pages.
 *
 * @TODO: We could limit this to just node view pages
 */
function jcms_ckeditor_page_attachments(array &$attachments) {
  $current_theme = \Drupal::theme()->getActiveTheme()->getName();
  $default_theme = \Drupal::config('system.theme')->get('default');
  if (\Drupal::currentUser()->hasPermission('use inline editor') && $current_theme == $default_theme) {
    $attachments['#attached'] = \Drupal::service('plugin.manager.editor')->getAttachments(['ckeditor_html']);
    $attachments['#attached']['library'][] = 'jcms_ckeditor/jcms_ckeditor';
    //$attachments['#attached']['library'][] = 'jcms_ckeditor/toastify';
    $attachments['#attached']['library'][] = 'jcms_ckeditor/toastr';
    $attachments['#attached']['drupalSettings']['placeholder'] = t('Type something here ...');
  }
}

/**
 * Implements hook_preprocess_html().
 *
 * Add data fields to body tag so editor can find UUID and node type.
 */
function jcms_ckeditor_preprocess_html(array &$variables) {
  $route = \Drupal::service('current_route_match');
  if ($route->getRouteName() == 'entity.node.canonical') {
    $node = $route->getParameter('node');
    $node_type = $node->getType();
    $variables['attributes']['data-uuid'] = $node->uuid();
    $variables['attributes']['data-node-type'] = $node_type;
    if (in_array($node_type, jcms_ckeditor_editable_types())) {
      $variables['attributes']['class'][] = 'page-ckeditor-inline';
    }
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Add page links.
 */
function jcms_ckeditor_preprocess_page(array &$variables) {
  $route = \Drupal::service('current_route_match');
  if ($route->getRouteName() == 'entity.node.canonical') {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $route->getParameter('node');
    if (in_array($node->getType(), jcms_ckeditor_editable_types())) {
      $variables['top_left_links'] = [
        '#theme' => 'item_list',
        '#items' => [
          Link::fromTextAndUrl(t('Save & Close'), Url::fromRoute('<none>')->setOption('attributes', ['class' => ['save-button', 'button']])),
        ],
        '#attributes' => [
          'class' => '',
        ],
      ];
      $journal_path = Settings::get('journal_path');
      $journal_preview = Settings::get('journal_preview');
      $items = [];
      if ($journal_path && $node->isPublished()) {
        $items[] = Link::fromTextAndUrl(
          t('View published'),
          Url::fromUri(
            $journal_path .
            \Drupal::service('jcms_admin.content_path')
              ->create($node)
          )->setOption('attributes', [
            'target' => '_blank',
            'class' => [
              'published-link',
              'button',
            ],
          ])
        );
      }
      if ($journal_preview) {
        $items[] = Link::fromTextAndUrl(
          t('Preview'),
          Url::fromUri(
            Settings::get('journal_preview') .
            \Drupal::service('jcms_admin.content_path')
              ->create($node)
          )->setOption('attributes', [
            'target' => '_blank',
            'class' => [
              'preview-link',
              'button',
            ],
          ]));
      }
      if ($node->isPublished()) {
        $items[] = Link::fromTextAndUrl(t('Reset to published'), Url::fromRoute('jcms_admin.reset_content', ['node' => $node->id()])->setOptions(['attributes' => ['class' => ['discard-button', 'button']]]));
      }
      $items[] = Link::fromTextAndUrl(t('Publish/Update'), Url::fromRoute('<none>')->setOption('attributes', ['class' => ['publish-button', 'button']]));
      $variables['top_right_links'] = [
        '#theme' => 'item_list',
        '#items' => $items,
      ];
    }
  }
}

/**
 * Implements hook_entity_presave().
 *
 * For images save width and height in attached fields.
 * For nodes to be edited make sure the display field and body field are
 * not empty but content placeholders.
 */
function jcms_ckeditor_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityType()->id() == 'file' && strpos($entity->getMimeType(), 'image') === 0 && $entity->hasField('field_image_width') && $entity->hasField('field_image_height')) {
    // Save width and height in image fields so they are available to editor.
    $uri = $entity->getFileUri();
    $image = \Drupal::service('image.factory')->get($uri);
    $entity->field_image_width = $image->getWidth();
    $entity->field_image_height = $image->getHeight();
  }
  elseif ($entity->getEntityType()->id() === 'node' && $entity->hasField('field_content_html_preview') && $entity->get('field_content_html_preview')->isEmpty()) {
    // Make body fields have placeholder set.
    $placeholder = t('Type something here ...');
    $entity->field_content_html_preview->value = '<placeholder>' . $placeholder . '</placeholder>';
    $entity->field_content_html_preview->format = 'ckeditor_html';
  }
}

/**
 * Implements hook_block_access().
 *
 * Do not show tabs on node view page if user using inline editor.
 */
function jcms_ckeditor_block_access(Block $block, string $operation, AccountInterface $account) {
  if ($operation == 'view' && $block->getPluginId() == 'local_tasks_block') {
    $route = \Drupal::service('current_route_match');
    if ($route->getRouteName() == 'entity.node.canonical') {
      /** @var \Drupal\node\NodeInterface $node */
      $node = $route->getParameter('node');
      if ($node->hasField('field_content_html_preview') && \Drupal::currentUser()->hasPermission('use inline editor')) {
        return AccessResult::forbidden()->cachePerPermissions();
      }
    }
  }
  return AccessResult::neutral()->cachePerPermissions();
}

/**
 * Implements hook_theme().
 */
function jcms_ckeditor_theme($existing, $type, $theme, $path) {
  return [
    'filter_ckimages' => [
      'variables' => [
        'node' => NULL,
        'caption' => NULL,
        'classes' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_node_alter().
 *
 * Allow for toolbar on editable node views.
 */
function jcms_ckeditor_theme_suggestions_node_alter(&$suggestions, $variables) {
  if (isset($variables['elements']['#node']) && isset($variables['elements']['#view_mode']) && $variables['elements']['#view_mode'] == 'full') {
    $type = $variables['elements']['#node']->bundle();
    if (in_array($type, jcms_ckeditor_editable_types())) {
      array_splice($suggestions, 1, 0, 'node__editable');
    }
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 *
 * Allow for page links.
 */
function jcms_ckeditor_theme_suggestions_page_alter(&$suggestions, $variables) {
  $route = \Drupal::service('current_route_match');
  if ($route->getRouteName() == 'entity.node.canonical') {
    $node = $route->getParameter('node');
    $type = $node->getType();
    $editable_types = jcms_ckeditor_editable_types();
    if (in_array($type, $editable_types)) {
      array_splice($suggestions, 1, 0, 'page__editable');
    }
  }
}

/**
 * Node types that support the inline editor.
 */
function jcms_ckeditor_editable_types() : array {
  return [
    'blog_article',
    'event',
    'interview',
    'labs_experiment',
    'press_package',
  ];
}

/**
 * Implements hook_ckeditor5_plugin_info_alter().
 */
function jcms_ckeditor_ckeditor5_plugin_info_alter(array &$plugin_definitions): void {
  $image_plugin_definition = $plugin_definitions['ckeditor5_image']->toArray();
  $image_plugin_definition['ckeditor5']['config']['image']['insert']['type'] = 'block';
  $plugin_definitions['ckeditor5_image']= new CKEditor5PluginDefinition($image_plugin_definition);
}

